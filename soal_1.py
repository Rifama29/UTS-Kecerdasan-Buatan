# -*- coding: utf-8 -*-
"""Soal 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAM5roOtwqQxVj_jLaZpazlhiGHz7q8i
"""

!pip install experta

!pip install --upgrade frozendict

from experta import *

class Diagnosis(KnowledgeEngine):

    def __init__(self):
        super().__init__()
        self.diagnosis_terjadi = False

    @Rule(Fact(bercak_putih=True), Fact(daun_mengering=False), Fact(tanaman_layu=False))
    def embun_bulu(self):
        print("Sepertinya tanaman anda mengalami serangan penyakit Embun Bulu.")
        self.diagnosis_terjadi = True

    @Rule(Fact(daun_menguning=False), Fact(tanaman_layu=True), Fact(bintik_putih=True))
    def hama_kutu_putih(self):
        print("Tanaman anda tampaknya terserang hama Kutu Putih.")
        self.diagnosis_terjadi = True

    @Rule(Fact(daun_robek=True), Fact(tanaman_layu=True))
    def hama_belalang(self):
        print("Tanaman anda mungkin dimakan oleh hama Belalang.")
        self.diagnosis_terjadi = True

    @Rule(Fact(bercak_coklat=True), Fact(tanaman_layu=False), Fact(daun_mengering=True))
    def penyakit_busuk_daun(self):
        print("Tanaman anda kemungkinan besar terserang penyakit Busuk Daun.")
        self.diagnosis_terjadi = True

    @Rule(Fact(daun_menguning=True), Fact(tanaman_layu=True), Fact(bintik_coklat=True))
    def penyakit_bintik_daun(self):
        print("Tanaman anda kemungkinan besar mengalami Penyakit Bintik Daun.")
        self.diagnosis_terjadi = True

    @Rule(Fact(daun_menguning=False), Fact(tanaman_layu=False), Fact(daun_robek=False), Fact(bercak_putih=False))
    def healthy(self):
        print("Tanaman anda sehat.")
        self.diagnosis_terjadi = True

    @Rule(AS.f << Fact(), salience=-10)
    def default_diagnosis(self):
        if not self.diagnosis_terjadi:
            print("Gejala yang terdeteksi tidak cocok dengan data yang ada. Silakan periksa kembali atau konsultasikan lebih lanjut.")

def get_input():
    """Helper function to get user input as boolean (yes/no)."""
    def ask_question(question):
        return input(question + " (yes/no): ").strip().lower() == "yes"

    return {
        "bercak_putih": ask_question("Apakah tanaman anda memiliki bercak putih?"),
        "daun_mengering": ask_question("Apakah daun tanaman anda tampak mengering?"),
        "tanaman_layu": ask_question("Apakah tanaman anda layu?"),
        "bintik_putih": ask_question("Apakah tanaman anda memiliki bintik putih?"),
        "daun_robek": ask_question("Apakah tanaman anda memiliki daun robek?"),
        "bercak_coklat": ask_question("Apakah tanaman anda memiliki bercak coklat?"),
        "bintik_coklat": ask_question("Apakah tanaman anda memiliki bintik coklat?"),
        "daun_menguning": ask_question("Apakah daun tanaman anda tampak menguning?")
    }

if __name__ == "__main__":
    symptoms = get_input()
    engine = Diagnosis()
    engine.reset()

    engine.declare(
        Fact(
            bercak_putih=symptoms["bercak_putih"],
            daun_mengering=symptoms["daun_mengering"],
            tanaman_layu=symptoms["tanaman_layu"],
            bintik_putih=symptoms["bintik_putih"],
            daun_robek=symptoms["daun_robek"],
            bercak_coklat=symptoms["bercak_coklat"],
            bintik_coklat=symptoms["bintik_coklat"],
            daun_menguning=symptoms["daun_menguning"]
        )
    )

    engine.run()

